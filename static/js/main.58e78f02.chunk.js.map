{"version":3,"sources":["redux/actions.js","redux/selectors.js","Layouts/LandingPage/index.jsx","Layouts/GameLayout/index.jsx","App.jsx","serviceWorker.js","redux/reducers.js","utils/utils.js","configs/config.js","redux/middleware.js","common/codes.js","index.js","configStore.js"],"names":["actionTypes","signUp","payload","type","endGameSuccess","requestUpdate","requestUpdateSuccess","requestUpdateFailure","selectGameDomain","state","game","playerIdSelector","createSelector","player","subState","playerId","gameIdSelector","id","gameBoardSelector","loading","board","gameIsOwnerSelector","isOwner","useStyles","makeStyles","theme","layout","paddingTop","spacing","mapDispatchToProps","startGame","connect","gameId","props","useState","showDialog","setShowDialog","idInput","setIdInput","classNames","handleCloseDialog","to","Container","className","Box","display","justifyContent","Button","variant","onClick","color","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","value","onChange","e","target","DialogActions","colorMapper","marginTop","boardContainer","position","arenaTable","border","borderCollapse","boxSizing","cell","width","height","backgroundColor","spot","borderRadius","cursor","wrapper","padding","marginBottom","actions","playMove","restartGame","endGame","useEffect","interval","setInterval","clearInterval","handleRestartGame","useCallback","handleEndGame","n","length","m","gameArena","i","row","j","push","key","Grid","container","item","md","map","y","x","style","top","clickableSize","left","borderColor","includes","handleCellClick","Paper","Typography","disabled","logIn","basename","path","Boolean","window","location","hostname","match","initialGameState","initialBoardState","errorMessage","initialPlayerState","combineReducers","action","boardUpdates","updates","filter","u","oldBoard","r","slice","newBoard","reduce","update","message","userId","getUrl","serverGet","url","axios","get","serverPost","data","post","httpPost","serverPut","put","httpPut","serverDelete","delete","getParams","store","config","getState","URLSearchParams","handlers","then","res","sessionStorage","setItem","code","dispatch","signUpFailure","getItem","params","toString","logInFailure","removeItem","startGameSuccess","startGameFailure","restartGameSuccess","restartGameFailure","endGameFailure","gameMiddleware","next","middleware","composeEnhancers","compose","createStore","reducer","applyMiddleware","configStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.58e78f02.chunk.js","sourcesContent":["export const actionTypes = {\n  SIGN_UP: 'gomoku/SIGN_UP',\n  SIGN_UP_SUCCESS: 'gomoku/SIGN_UP_SUCCESS',\n  SIGN_UP_FAILURE: 'gomoku/SIGN_UP_FAILURE',\n\n  LOG_IN: 'gomoku/LOG_IN',\n  LOG_IN_SUCCESS: 'gomoku/LOG_IN_SUCCESS',\n  LOG_IN_FAILURE: 'gomoku/LOG_IN_FAILURE',\n\n  START_GAME: 'gomoku/START_GAME',\n  START_GAME_SUCCESS: 'gomoku/START_GAME_SUCCESS',\n  START_GAME_FAILURE: 'gomoku/START_GAME_FAILURE',\n\n  END_GAME: 'gomoku/END_GAME',\n  END_GAME_SUCCESS: 'gomoku/END_GAME_SUCCESS',\n  END_GAME_FAILURE: 'gomoku/END_GAME_FAILURE',\n\n  RESTART_GAME: 'gomoku/RESTART_GAME',\n  RESTART_GAME_SUCCESS: 'gomoku/RESTART_GAME_SUCCESS',\n  RESTART_GAME_FAILURE: 'gomoku/RESTART_GAME_FAILURE',\n\n  REQUEST_UPDATE: 'gomoku/REQUEST_UPDATE',\n  REQUEST_UPDATE_SUCCESS: 'gomoku/REQUEST_UPDATE_SUCCESS',\n  REQUEST_UPDATE_FAILURE: 'gomoku/REQUEST_UPDATE_FAILURE',\n\n  PLAY_MOVE: 'gomoku/PLAY_MOVE',\n};\n\nexport const signUp = (payload) => ({\n  type: actionTypes.SIGN_UP,\n  payload,\n});\n\nexport const signUpSuccess = (payload) => ({\n  type: actionTypes.SIGN_UP_SUCCESS,\n  payload,\n});\n\nexport const signUpFailure = (payload) => ({\n  type: actionTypes.SIGN_UP_FAILURE,\n  payload,\n});\n\nexport const logIn = (payload) => ({\n  type: actionTypes.LOG_IN,\n  payload,\n});\n\nexport const logInSuccess = (payload) => ({\n  type: actionTypes.LOG_IN_SUCCESS,\n  payload,\n});\n\nexport const logInFailure = (payload) => ({\n  type: actionTypes.LOG_IN_FAILURE,\n  payload,\n});\n\nexport const startGame = (payload) => ({\n  type: actionTypes.START_GAME,\n  payload,\n});\n\nexport const startGameSuccess = (payload) => ({\n  type: actionTypes.START_GAME_SUCCESS,\n  payload,\n});\n\nexport const startGameFailure = (payload) => ({\n  type: actionTypes.START_GAME_FAILURE,\n  payload,\n});\n\nexport const endGame = (payload) => ({\n  type: actionTypes.END_GAME,\n  payload,\n});\n\nexport const endGameSuccess = (payload) => ({\n  type: actionTypes.END_GAME_SUCCESS,\n  payload,\n});\n\nexport const endGameFailure = (payload) => ({\n  type: actionTypes.END_GAME_FAILURE,\n  payload,\n});\n\nexport const restartGame = (payload) => ({\n  type: actionTypes.RESTART_GAME,\n  payload,\n});\n\nexport const restartGameSuccess = (payload) => ({\n  type: actionTypes.RESTART_GAME_SUCCESS,\n  payload,\n});\n\nexport const restartGameFailure = (payload) => ({\n  type: actionTypes.RESTART_GAME_FAILURE,\n  payload,\n});\n\nexport const requestUpdate = (payload) => ({\n  type: actionTypes.REQUEST_UPDATE,\n  payload,\n});\n\nexport const requestUpdateSuccess = (payload) => ({\n  type: actionTypes.REQUEST_UPDATE_SUCCESS,\n  payload,\n});\n\nexport const requestUpdateFailure = (payload) => ({\n  type: actionTypes.REQUEST_UPDATE_FAILURE,\n  payload,\n});\n\nexport const playMove = (payload) => ({\n  type: actionTypes.PLAY_MOVE,\n  payload,\n});\n","import { createSelector } from 'reselect';\n\nconst selectGameDomain = (state) => state.game;\n\nconst selectBoardDomain = (state) => state.board;\n\nconst selectPlayerDomain = (state) => state.player;\n\nexport const playerIdSelector = createSelector(\n  selectPlayerDomain,\n  (subState) => subState.playerId\n);\n\nexport const gameIdSelector = createSelector(\n  selectGameDomain,\n  (subState) => subState.id\n);\n\nexport const gameIsLoadingSelector = createSelector(\n  selectGameDomain,\n  (subState) => subState.loading\n);\n\nexport const gameBoardSelector = createSelector(\n  selectBoardDomain,\n  (subState) => subState.board\n);\n\nexport const gameIsOwnerSelector = createSelector(\n  selectGameDomain,\n  (subState) => subState.isOwner\n);\n","import React, { useState } from 'react';\nimport {\n  Container,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  TextField,\n  DialogActions,\n  Box,\n  makeStyles,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { startGame } from '../../redux/actions';\nimport PropTypes from 'prop-types';\nimport { gameIdSelector } from '../../redux/selectors';\nimport { Redirect } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    paddingTop: theme.spacing(6),\n  },\n}));\n\nconst LandingPage = (props) => {\n  const [showDialog, setShowDialog] = useState(false);\n  const [idInput, setIdInput] = useState('');\n  const classNames = useStyles();\n\n  const handleCloseDialog = () => {\n    setShowDialog(false);\n    setIdInput('');\n  };\n\n  const handleStartGameWithId = () => {\n    props.startGame({ gameId: idInput });\n    handleCloseDialog();\n  };\n\n  if (props.gameId) {\n    return <Redirect to=\"/game\" />;\n  }\n\n  return (\n    <Container className={classNames.layout}>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Button variant=\"contained\" onClick={() => setShowDialog(true)}>\n          Enter game ID\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => props.startGame()}\n        >\n          Start a new game\n        </Button>\n      </Box>\n      <Dialog open={showDialog} onClose={handleCloseDialog}>\n        <DialogTitle>Enter an existing game</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please enter the game ID for the existing game.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"gameId\"\n            label=\"Game ID\"\n            type=\"text\"\n            fullWidth\n            value={idInput}\n            onChange={(e) => setIdInput(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>Cancel</Button>\n          <Button onClick={handleStartGameWithId} color=\"secondary\">\n            Enter game\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nLandingPage.propTypes = {\n  gameId: PropTypes.string,\n  startGame: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  gameId: gameIdSelector(state),\n});\n\nconst mapDispatchToProps = {\n  startGame,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LandingPage);\n","import React, { useCallback, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  requestUpdate,\n  playMove,\n  restartGame,\n  endGame,\n} from '../../redux/actions';\nimport {\n  gameIdSelector,\n  gameBoardSelector,\n  playerIdSelector,\n  gameIsOwnerSelector,\n} from '../../redux/selectors';\nimport { Redirect } from 'react-router-dom';\nimport {\n  Container,\n  makeStyles,\n  Typography,\n  Button,\n  Grid,\n  Paper,\n  Box,\n} from '@material-ui/core';\n\nconst UPDATE_INTERVAL = 1000;\n\nconst cellSize = 28;\nconst clickableSize = 14;\n\nconst colorMapper = ['#000', '#fff'];\n\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    marginTop: theme.spacing(6),\n  },\n  boardContainer: {\n    position: 'relative',\n  },\n  arenaTable: {\n    border: '1px solid #444',\n    borderCollapse: 'collapse',\n    boxSizing: 'border-box',\n  },\n  cell: {\n    width: `${cellSize}px`,\n    height: `${cellSize}px`,\n    border: '1px solid #444',\n    boxSizing: 'border-box',\n    backgroundColor: 'rgb(241, 236, 211)',\n  },\n  spot: {\n    display: 'inline-block',\n    position: 'absolute',\n    borderRadius: '50%',\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    width: `${clickableSize}px`,\n    height: `${clickableSize}px`,\n    border: '1px solid transparent',\n  },\n  wrapper: {\n    padding: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  },\n  actions: {\n    '& > *': {\n      margin: theme.spacing(0.5),\n    },\n  },\n}));\n\nconst GameLayout = (props) => {\n  const {\n    gameId,\n    requestUpdate,\n    restartGame,\n    playMove,\n    endGame,\n    board,\n    playerId,\n    isOwner,\n  } = props;\n  const classNames = useStyles();\n\n  useEffect(() => {\n    if (gameId) {\n      requestUpdate({ gameId });\n\n      const interval = setInterval(() => {\n        requestUpdate({ gameId });\n      }, UPDATE_INTERVAL);\n\n      return () => clearInterval(interval);\n    }\n  }, [gameId, requestUpdate]);\n\n  const handleRestartGame = useCallback(() => {\n    if (isOwner) restartGame({ gameId });\n  }, [isOwner, gameId, restartGame]);\n\n  const handleEndGame = useCallback(() => {\n    if (isOwner) endGame({ gameId })\n  }, [isOwner, gameId, endGame]);\n\n  if (!gameId) return <Redirect to=\"/\" />;\n\n  const handleCellClick = (x, y) => {\n    playMove({ gameId, playerId, x, y });\n  };\n\n  const n = board.length;\n  const m = (board[0] || []).length;\n  const gameArena = [];\n\n  for (let i = 0; i <= n; ++i) {\n    const row = [];\n    for (let j = 0; j <= m; ++j) {\n      row.push(<td key={j} className={classNames.cell} />);\n    }\n    gameArena.push(<tr key={i}>{row}</tr>);\n  }\n\n  return (\n    <Container className={classNames.layout}>\n      <Grid container>\n        <Grid item md={8}>\n          <Box display=\"flex\" justifyContent=\"center\">\n            <div className={classNames.boardContainer}>\n              <div>\n                {board.map((row, y) =>\n                  row.map((cell, x) => (\n                    <span\n                      key={`${x},${y}`}\n                      className={classNames.spot}\n                      style={{\n                        top: `${(y + 1) * cellSize - clickableSize / 2}px`,\n                        left: `${(x + 1) * cellSize - clickableSize / 2}px`,\n                        backgroundColor: colorMapper[cell],\n                        borderColor: ![0, 1].includes(cell)\n                          ? 'transparent'\n                          : '#555',\n                      }}\n                      onClick={() => handleCellClick(x, y)}\n                    />\n                  ))\n                )}\n              </div>\n              <table className={classNames.arenaTable}>\n                <tbody>{gameArena}</tbody>\n              </table>\n            </div>\n          </Box>\n        </Grid>\n        <Grid item md={4}>\n          <Paper className={classNames.wrapper}>\n            <Typography variant=\"h6\">Info</Typography>\n            <br />\n            <Typography variant=\"body1\">ID: {gameId}</Typography>\n          </Paper>\n          <Paper className={classNames.wrapper}>\n            <Typography variant=\"h6\">Actions</Typography>\n            <br />\n            <div className={classNames.actions}>\n              <Button\n                variant=\"contained\"\n                disabled={!isOwner}\n                onClick={handleRestartGame}\n              >\n                Restart\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={!isOwner}\n                onClick={handleEndGame}\n              >\n                End game\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nGameLayout.propTypes = {\n  gameId: PropTypes.string,\n  playerId: PropTypes.string,\n  isOwner: PropTypes.bool.isRequired,\n  board: PropTypes.arrayOf(PropTypes.array),\n  requestUpdate: PropTypes.func.isRequired,\n  playMove: PropTypes.func.isRequired,\n  restartGame: PropTypes.func.isRequired,\n  endGame: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  gameId: gameIdSelector(state),\n  playerId: playerIdSelector(state),\n  isOwner: gameIsOwnerSelector(state),\n  board: gameBoardSelector(state),\n});\n\nconst mapDispatchToProps = {\n  requestUpdate,\n  playMove,\n  restartGame,\n  endGame,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLayout);\n","import React, { useEffect } from 'react';\nimport LandingPage from './Layouts/LandingPage';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport GameLayout from './Layouts/GameLayout';\nimport { connect } from 'react-redux';\nimport { logIn } from './redux/actions';\nimport PropTypes from 'prop-types';\nimport { playerIdSelector } from './redux/selectors';\n\nfunction App({ logIn, playerId }) {\n  useEffect(() => {\n    if (!playerId) logIn();\n  }, [playerId, logIn]);\n\n  return (\n    <BrowserRouter basename=\"/rabbit-and-pig-gomoku\">\n      <Switch>\n        <Route path=\"/game\">\n          <GameLayout />\n        </Route>\n        <Route path=\"/\">\n          <LandingPage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nApp.propTypes = {\n  playerId: PropTypes.string,\n  logIn: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerId: playerIdSelector(state),\n});\n\nconst mapDispatchToProps = {\n  logIn,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { actionTypes } from './actions';\n\nconst initialGameState = {\n  id: null,\n  loading: false,\n  isOwner: false // TODO: this is maintained in frontend only, should sync with server\n};\n\nconst game = (state = initialGameState, action) => {\n  const { type, payload = {} } = action;\n\n  switch (type) {\n    case actionTypes.START_GAME:\n      return { ...state, id: null, loading: true, isOwner: !Boolean(payload.gameId) };\n\n    case actionTypes.START_GAME_SUCCESS:\n      return {\n        ...state,\n        id: payload.id,\n        playerId: payload.playerId,\n        loading: false\n      };\n\n    case actionTypes.END_GAME_SUCCESS:\n    case actionTypes.START_GAME_FAILURE:\n      return { ...state, id: null, loading: false, isOwner: false };\n\n    default:\n      break;\n  }\n\n  return { ...state };\n};\n\nconst initialBoardState = {\n  board: [],\n  loading: false,\n  errorMessage: null,\n};\n\nconst board = (state = initialBoardState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case actionTypes.REQUEST_UPDATE:\n      return { ...state, loading: true };\n\n    case actionTypes.REQUEST_UPDATE_SUCCESS: {\n      const boardUpdates = payload.updates.filter((u) =>\n        ['board', 'move'].includes(u.type)\n      );\n\n      if (boardUpdates.length === 0) break;\n\n      const oldBoard = state.board.map((r) => r.slice());\n      const newBoard = boardUpdates.reduce((board, update) => {\n        if (update.type === 'board') {\n          return update.board;\n        } else if (update.type === 'move') {\n          board[update.y][update.x] = update.value;\n        }\n\n        return board;\n      }, oldBoard);\n\n      return {\n        ...state,\n        loading: false,\n        board: newBoard,\n      };\n    }\n    case actionTypes.REQUEST_UPDATE_FAILURE:\n      return { ...state, loading: false, errorMessage: payload.message };\n\n    default:\n      break;\n  }\n\n  return { ...state };\n};\n\nconst initialPlayerState = {\n  playerId: null,\n  loading: false,\n};\n\nconst player = (state = initialPlayerState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case actionTypes.SIGN_UP:\n      return { ...state, loading: true };\n\n    case actionTypes.LOG_IN_SUCCESS:\n    case actionTypes.SIGN_UP_SUCCESS:\n      return { ...state, loading: false, playerId: payload.userId };\n\n    case actionTypes.SIGN_UP_FAILURE:\n      return { ...state, loading: false };\n\n    default:\n      break;\n  }\n\n  return { ...state };\n};\n\nexport default combineReducers({ game, board, player });\n","import axios from 'axios';\nimport { SERVER_URL } from '../configs/config';\n\nconst getUrl = (target) => `${SERVER_URL}${target}`;\n\nexport const httpGet = (url) => axios.get(url);\n\nexport const httpPost = (url, data) => axios.post(url, data);\n\nexport const httpPut = (url, data) => axios.put(url, data);\n\nexport const httpDelete = (url) => axios.delete(url);\n\nexport const serverGet = (target) => httpGet(getUrl(target));\n\nexport const serverPost = (target, data) => httpPost(getUrl(target), data);\n\nexport const serverPut = (target, data) => httpPut(getUrl(target), data);\n\nexport const serverDelete = (target) => httpDelete(getUrl(target));\n\nconst PLAYER_ID_KEY = 'playerId';\n\nexport const setPlayerId = (playerId) =>\n  sessionStorage.setItem(PLAYER_ID_KEY, playerId);\n\nexport const getPlayerId = () => sessionStorage.getItem(PLAYER_ID_KEY);\n\nexport const clearPlayerId = () => sessionStorage.removeItem(PLAYER_ID_KEY);\n","export const ENV = 'prod';\nexport const SERVER_URL = 'https://rabbit-and-pig.herokuapp.com';\n","import {\n  actionTypes,\n  startGameSuccess,\n  requestUpdateSuccess,\n  requestUpdateFailure,\n  signUpSuccess,\n  signUp,\n  logInSuccess,\n  restartGameSuccess,\n  restartGameFailure,\n  requestUpdate,\n  startGameFailure,\n  signUpFailure,\n  logInFailure,\n  endGameSuccess,\n  endGameFailure,\n} from './actions';\nimport {\n  serverPost,\n  serverGet,\n  serverPut,\n  getPlayerId,\n  setPlayerId,\n  clearPlayerId,\n  serverDelete,\n} from '../utils/utils';\nimport { playerIdSelector } from './selectors';\nimport { SUCCESS, GAME_ENDED } from '../common/codes';\n\nconst getParams = (store, config) => {\n  const playerId = playerIdSelector(store.getState());\n  const params = new URLSearchParams({ userId: playerId, ...config });\n  return params;\n};\n\nconst handleSignUp = (store) => {\n  serverPost('/signup').then((res) => {\n    const { data } = res;\n    setPlayerId(data.userId);\n    if (data.code === SUCCESS)\n      store.dispatch(signUpSuccess({ userId: data.userId }));\n    else store.dispatch(signUpFailure(data));\n  });\n};\n\nconst handleLogin = (store) => {\n  const playerId = getPlayerId();\n  if (!playerId) {\n    return store.dispatch(signUp());\n  }\n\n  const params = new URLSearchParams({ userId: playerId });\n  serverPost(`/login?${params.toString()}`).then((res) => {\n    const { data } = res;\n    if (data.code === SUCCESS)\n      return store.dispatch(logInSuccess({ userId: data.userId }));\n    else store.dispatch(logInFailure(data));\n\n    clearPlayerId();\n    store.dispatch(signUp());\n  });\n};\n\nconst handleStartGame = (store, { payload = {} }) => {\n  const { gameId } = payload;\n  const params = getParams(store, gameId ? { gameId } : {});\n\n  serverPost(`/game/gomoku/start?${params.toString()}`).then((res) => {\n    const { data } = res;\n    if (data.code === SUCCESS) store.dispatch(startGameSuccess(data));\n    else store.dispatch(startGameFailure(data));\n  });\n};\n\nconst handleRestartGame = (store, { payload }) => {\n  const { gameId } = payload;\n  const params = getParams(store, { gameId });\n\n  serverPut(`/game/gomoku/restart?${params.toString()}`).then((res) => {\n    const { data } = res;\n    if (data.code === SUCCESS) {\n      store.dispatch(restartGameSuccess());\n      store.dispatch(requestUpdate({ gameId }));\n    } else {\n      store.dispatch(restartGameFailure(data));\n    }\n  });\n};\n\nconst handleRequestUpdate = (store, { payload }) => {\n  const params = getParams(store, { gameId: payload.gameId });\n\n  serverGet(`/game/gomoku/update?${params.toString()}`).then((res) => {\n    const {\n      data: { code, message, updates },\n    } = res;\n\n    if (code === SUCCESS) {\n      if (updates) store.dispatch(requestUpdateSuccess({ updates }));\n    } else if (code === GAME_ENDED) {\n      store.dispatch(endGameSuccess());\n    } else {\n      store.dispatch(requestUpdateFailure({ code, message }));\n    }\n  });\n};\n\nconst handlePlay = (store, { payload }) => {\n  const { gameId, playerId, x, y } = payload;\n  const params = getParams(store, { gameId, x, y });\n\n  serverPut(`/game/gomoku/play?${params.toString()}`, { playerId, x, y }).then(\n    (res) => {\n      const { code, message, updates } = res.data;\n      if (code === 'SUCCESS') store.dispatch(requestUpdateSuccess({ updates }));\n      else store.dispatch(requestUpdateFailure({ code, message }));\n    }\n  );\n};\n\nconst handleEndGame = (store, { payload }) => {\n  const { gameId } = payload;\n  const params = getParams(store, { gameId });\n\n  serverDelete(`/game/gomoku/end?${params.toString()}`).then((res) => {\n    const { code } = res.data;\n    if (code === SUCCESS) store.dispatch(endGameSuccess());\n    else store.dispatch(endGameFailure());\n  });\n};\n\nconst handlers = {\n  [actionTypes.SIGN_UP]: handleSignUp,\n  [actionTypes.LOG_IN]: handleLogin,\n  [actionTypes.START_GAME]: handleStartGame,\n  [actionTypes.RESTART_GAME]: handleRestartGame,\n  [actionTypes.REQUEST_UPDATE]: handleRequestUpdate,\n  [actionTypes.PLAY_MOVE]: handlePlay,\n  [actionTypes.END_GAME]: handleEndGame,\n};\n\nconst gameMiddleware = (store) => (next) => (action) => {\n  if (handlers[action.type]) {\n    handlers[action.type](store, action);\n  }\n\n  next(action);\n};\n\nexport default gameMiddleware;\n","export const SUCCESS = 'SUCCESS';\nexport const GAME_ENDED = 'GAME_ENDED';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configStore from './configStore';\n\nconst store = configStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport reducer from './redux/reducers';\nimport gameMiddleware from './redux/middleware';\nimport { ENV } from './configs/config';\n\nexport default function () {\n  const middleware = [gameMiddleware];\n\n  const composeEnhancers =\n    ENV === 'dev'\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n      : compose;\n\n  const store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(...middleware))\n  );\n\n  return store;\n}\n"],"sourceRoot":""}